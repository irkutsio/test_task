{"mappings":"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","sources":["src/blocks.json","src/getColorForSize.js","src/getRandomColor.js","src/createMarkup.js","src/arrangedBlocks.js","src/calculateFullness.js","src/displayFinalResult.js","src/displayCoords.js","src/index.js"],"sourcesContent":["[\n    { \"width\": 190, \"height\": 90 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 45, \"height\":78 },\n    { \"width\": 398, \"height\": 34 },\n    { \"width\": 44, \"height\": 44 },\n    { \"width\": 13, \"height\": 134 },\n    { \"width\": 398, \"height\": 34 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 45, \"height\":78 },\n    { \"width\": 13, \"height\": 134 },\n    { \"width\": 398, \"height\": 34 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 90, \"height\": 90 },\n    { \"width\": 90, \"height\": 90 },\n    { \"width\": 190, \"height\": 90 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 45, \"height\":78 },\n    { \"width\": 398, \"height\": 34 },\n    { \"width\": 44, \"height\": 44 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 90, \"height\": 90 },\n    { \"width\": 90, \"height\": 90 }\n   ]","import { getRandomHexColor } from './getRandomColor';\n\nlet usedColors = {};\n\nexport function getColorForSize(width, height) {\n  const key = `${width}-${height}`;\n\n  if (!usedColors[key]) {\n    usedColors[key] = getRandomHexColor();\n  }\n\n  return usedColors[key];\n}\n","export function getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, '0')}`;\n  }","import { getColorForSize } from './getColorForSize';\n\nexport function createMarkup(arr, coords) {\n  const markup = arr\n    .map((item, idx) => {\n      const backgroundColor = getColorForSize(item.width, item.height);\n      const { x, y } = coords[idx];\n      return `\n        <div style=\"width: ${item.width}px; height: ${\n        item.height\n      }px; background-color: ${backgroundColor}; border: 1px grey solid; position: absolute; left: ${x}px; top: ${y}px;\">\n          <span>${idx}</span>\n        </div>`;\n    })\n    .join('');\n\n  return markup;\n}\n\n\n","export function arrangedBlocks(blocksArr, containerHeight) {\n  let blocksArea = 0;\n  let maxWidth = 0;\n  blocksArr.forEach(block => {\n    blocksArea += block.width * block.height;\n    maxWidth = Math.max(maxWidth, block.width);\n  });\n\n  blocksArr.sort((a, b) => b.height - a.height);\n\n  const startWidth = Math.max(\n    Math.ceil(Math.sqrt(blocksArea / 0.95)),\n    maxWidth\n  );\n\n  const spaces = [{ x: 0, y: 0, w: startWidth, h: containerHeight }];\n  const packed = [];\n\n  for (const block of blocksArr) {\n    for (let i = spaces.length - 1; i >= 0; i--) {\n      const space = spaces[i];\n      if (block.width > space.w || block.height > space.h) continue;\n      packed.push(Object.assign({}, block, { x: space.x, y: space.y }));\n\n      if (block.width === space.w && block.height === space.h) {\n        const last = spaces.pop();\n        if (i < spaces.length) spaces[i] = last;\n      } else if (block.height === space.h) {\n        space.x += block.width;\n        space.w -= block.width;\n      } else if (block.width === space.w) {\n        space.y += block.height;\n        space.h -= block.height;\n      } else {\n        spaces.push({\n          x: space.x + block.width,\n          y: space.y,\n          w: space.w - block.width,\n          h: block.height,\n        });\n        space.y += block.height;\n        space.h -= block.height;\n      }\n      break;\n    }\n  }\n\n  return packed;\n}\n","const fullnessOutput = document.querySelector('.fullness');\n\nexport const calculateFullness = (blocks, container) => {\n  const { clientHeight, clientWidth } = container;\n  let blocksArea = 0;\n  let emptySpaceArea = 0;\n  let containerArea = clientHeight * clientWidth;\n\n  blocks.forEach(({ height, width }) => {\n    blocksArea += height * width;\n  });\n\n  emptySpaceArea = containerArea - blocksArea;\n\n  const fullness = 1 - emptySpaceArea / (emptySpaceArea + blocksArea);\n  fullnessOutput.textContent = `Fullness: ${fullness.toFixed(2)}`;\n\n  return fullness.toFixed(2);\n};\n","import { calculateFullness } from './calculateFullness';\nimport { displayCoords } from './displayCoords';\n\nexport function displayFinalResult(blocks, container, result) {\n    console.log({\n      fullness: Number(calculateFullness(blocks, container)),\n      blockCoordinates: displayCoords(result),\n    });\n  }\n  ","export function displayCoords(blocksArr) {\n  let displayResults = [];\n\n  blocksArr.forEach((block, idx) => {\n    const { x, y, width, height } = block;\n    const top = y;\n    const left = x;\n    const right = x + width;\n    const bottom = y + height;\n\n    displayResults.push({\n      top,\n      left,\n      right,\n      bottom,\n      initialOrder: idx,\n    });\n  });\n\n  return displayResults\n}\n","import blocks from './blocks.json';\nimport { createMarkup } from './createMarkup';\nimport { arrangedBlocks } from './arrangedBlocks';\nimport { displayFinalResult } from './displayFinalResult';\n\nconst container = document.getElementById('root');\nlet containerHeight = container.clientHeight;\n\nconst initialResult = arrangedBlocks(blocks, containerHeight);\ncontainer.insertAdjacentHTML('beforeend', createMarkup(blocks, initialResult));\ndisplayFinalResult(blocks, container, initialResult);\n\nwindow.addEventListener('resize', () => {\n  containerHeight = container.clientHeight;\n  const result = arrangedBlocks(blocks, containerHeight);\n  container.innerHTML = '';\n  container.insertAdjacentHTML('beforeend', createMarkup(blocks, result));\n  displayFinalResult(blocks, container, result)\n});\n\n"],"names":["$39845a540c20a34c$exports","JSON","parse","$fbc42884b3a77c2e$var$usedColors","$fbc42884b3a77c2e$export$725e0d28a8a9aea6","width","height","key","concat","Math","floor","random","toString","padStart","$05c5764cdc286c40$export$24783e9f3a24abe4","arr","coords","map","item","idx","backgroundColor","_idx","x","y","join","$59dbb22f7232e9f7$export$f59bff48ccc1d3c8","blocksArr","containerHeight","blocksArea","maxWidth","forEach","block","max","sort","a","b","spaces","w","ceil","sqrt","h","packed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","block1","value","i","length","space","push","Object","assign","last","pop","err","return","$e7c579d199a205b9$var$fullnessOutput","document","querySelector","$e7c579d199a205b9$export$c7b9da3cd4a1f49e","blocks","container","emptySpaceArea","clientHeight","clientWidth","containerArea","param","fullness","textContent","toFixed","$f88388b002764181$export$a9241e14f5e4d15d","result","displayResults","console","log","Number","blockCoordinates","top","left","right","bottom","initialOrder","$b8f9b7833fa37166$var$container","getElementById","$b8f9b7833fa37166$var$containerHeight","$b8f9b7833fa37166$var$initialResult","$parcel$interopDefault","insertAdjacentHTML","window","addEventListener","innerHTML"],"version":3,"file":"index.5b25022b.js.map"}