{"mappings":"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","sources":["src/blocks.json","src/getColorForSize.js","src/getRandomColor.js","src/createMarkup.js","src/arrangedBlocks.js","src/calculateFullness.js","src/displayCoords.js","src/displayFinalResult.js","src/index.js"],"sourcesContent":["[\n    { \"width\": 190, \"height\": 90 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 45, \"height\":78 },\n    { \"width\": 398, \"height\": 34 },\n    { \"width\": 44, \"height\": 44 },\n    { \"width\": 13, \"height\": 134 },\n    { \"width\": 398, \"height\": 34 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 45, \"height\":78 },\n    { \"width\": 13, \"height\": 134 },\n    { \"width\": 398, \"height\": 34 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 90, \"height\": 90 },\n    { \"width\": 90, \"height\": 90 },\n    { \"width\": 190, \"height\": 90 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 45, \"height\":78 },\n    { \"width\": 398, \"height\": 34 },\n    { \"width\": 44, \"height\": 44 },\n    { \"width\": 90, \"height\": 190 },\n    { \"width\": 90, \"height\": 90 },\n    { \"width\": 90, \"height\": 90 }\n   ]","import { getRandomHexColor } from './getRandomColor';\n\nlet usedColors = {};\n\nexport function getColorForSize(width, height) {\n  const key = `${width}-${height}`;\n\n  if (!usedColors[key]) {\n    usedColors[key] = getRandomHexColor();\n  }\n\n  return usedColors[key];\n}\n","export function getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, '0')}`;\n  }","import { getColorForSize } from './getColorForSize';\n\nexport function createMarkup(arr, coords) {\n  const markup = arr\n    .map((item, idx) => {\n      const backgroundColor = getColorForSize(item.width, item.height);\n      const { x, y } = coords[idx];\n      return `\n        <div style=\"width: ${item.width}px; height: ${\n        item.height\n      }px; background-color: ${backgroundColor}; border: 1px grey solid; position: absolute; left: ${x}px; top: ${y}px;\">\n          <span>${idx}</span>\n        </div>`;\n    })\n    .join('');\n\n  return markup;\n}\n\n\n","export function arrangedBlocks(blocksArr, containerHeight) {\n  let blocksArea = 0;\n  let maxWidth = 0;\n  blocksArr.forEach(block => {\n    blocksArea += block.width * block.height;\n    maxWidth = Math.max(maxWidth, block.width);\n  });\n\n  blocksArr.sort((a, b) => b.height - a.height);\n\n  const startWidth = Math.max(\n    Math.ceil(Math.sqrt(blocksArea / 0.95)),\n    maxWidth\n  );\n\n  const spaces = [{ x: 0, y: 0, w: startWidth, h: containerHeight }];\n  const packed = [];\n\n  for (const block of blocksArr) {\n    for (let i = spaces.length - 1; i >= 0; i--) {\n      const space = spaces[i];\n      if (block.width > space.w || block.height > space.h) continue;\n      packed.push(Object.assign({}, block, { x: space.x, y: space.y }));\n\n      if (block.width === space.w && block.height === space.h) {\n        const last = spaces.pop();\n        if (i < spaces.length) spaces[i] = last;\n      } else if (block.height === space.h) {\n        space.x += block.width;\n        space.w -= block.width;\n      } else if (block.width === space.w) {\n        space.y += block.height;\n        space.h -= block.height;\n      } else {\n        spaces.push({\n          x: space.x + block.width,\n          y: space.y,\n          w: space.w - block.width,\n          h: block.height,\n        });\n        space.y += block.height;\n        space.h -= block.height;\n      }\n      break;\n    }\n  }\n\n  return packed;\n}\n","const fullnessOutput = document.querySelector('.fullness');\n\nexport const calculateFullness = (blocks, container) => {\n  const { clientHeight, clientWidth } = container;\n  let blocksArea = 0;\n  let emptySpaceArea = 0;\n  let containerArea = clientHeight * clientWidth;\n\n  blocks.forEach(({ height, width }) => {\n    blocksArea += height * width;\n  });\n\n  emptySpaceArea = containerArea - blocksArea;\n\n  const fullness = 1 - emptySpaceArea / (emptySpaceArea + blocksArea);\n  fullnessOutput.textContent = `Fullness: ${fullness.toFixed(2)}`;\n\n  return fullness.toFixed(2);\n};\n","export function displayCoords(blocksArr) {\n  let displayResults = [];\n\n  blocksArr.forEach((block, idx) => {\n    const { x, y, width, height } = block;\n    const top = y;\n    const left = x;\n    const right = x + width;\n    const bottom = y + height;\n\n    displayResults.push({\n      top,\n      left,\n      right,\n      bottom,\n      initialOrder: idx,\n    });\n  });\n\n  return displayResults\n}\n","import { calculateFullness } from './calculateFullness';\nimport { displayCoords } from './displayCoords';\n\nexport function displayFinalResult(blocks, container, result) {\n    console.log({\n      fullness: Number(calculateFullness(blocks, container)),\n      blockCoordinates: displayCoords(result),\n    });\n  }\n  ","import blocks from './blocks.json';\nimport { createMarkup } from './createMarkup';\nimport { arrangedBlocks } from './arrangedBlocks';\nimport { displayFinalResult } from './displayFinalResult';\n\nconst container = document.getElementById('root');\nlet containerHeight = container.clientHeight;\n\nconst initialResult = arrangedBlocks(blocks, containerHeight);\ncontainer.insertAdjacentHTML('beforeend', createMarkup(blocks, initialResult));\ndisplayFinalResult(blocks, container, initialResult);\n\nwindow.addEventListener('resize', () => {\n  containerHeight = container.clientHeight;\n  const result = arrangedBlocks(blocks, containerHeight);\n  container.innerHTML = '';\n  container.insertAdjacentHTML('beforeend', createMarkup(blocks, result));\n  displayFinalResult(blocks, container, result)\n});\n\n"],"names":["$ad27ad589cdad272$exports","JSON","parse","$b85988d8ba98b4e6$var$usedColors","$b85988d8ba98b4e6$export$725e0d28a8a9aea6","width","height","key","Math","floor","random","toString","padStart","$fdd6bbb96af63f6e$export$24783e9f3a24abe4","arr","coords","map","item","idx","backgroundColor","x","y","join","$aa554d087387f71c$export$f59bff48ccc1d3c8","blocksArr","containerHeight","blocksArea","maxWidth","forEach","block","max","sort","a","b","spaces","w","ceil","sqrt","h","packed","block1","i","length","space","push","Object","assign","last","pop","$351beb3ba2129591$var$fullnessOutput","document","querySelector","$351beb3ba2129591$export$c7b9da3cd4a1f49e","blocks","container","clientHeight","clientWidth","emptySpaceArea","containerArea","fullness","textContent","toFixed","$2d30278f20df55f6$export$915b96405f9c7ae9","displayResults","top","left","right","bottom","initialOrder","$a7e5420f85c9d783$export$a9241e14f5e4d15d","result","console","log","Number","blockCoordinates","$1f0dc3b9307be026$var$container","getElementById","$1f0dc3b9307be026$var$containerHeight","$1f0dc3b9307be026$var$initialResult","$parcel$interopDefault","insertAdjacentHTML","window","addEventListener","innerHTML"],"version":3,"file":"index.c8ef3c87.js.map"}